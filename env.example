# Tirade Trading Bot Suite - Environment Configuration
# Copy this file to .env and configure your settings

# ============================================================================
# MULTIWALLET CONFIGURATION (Enhanced)
# ============================================================================

# === SINGLE WALLET (Legacy Support) ===
# Your Solana private key - JSON array format from solana-keygen
# Generate with: solana-keygen new --outfile wallet.json
SOLANA_PRIVATE_KEY=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

# === MULTIWALLET CONFIGURATION (Recommended) ===
# Multiple Solana private keys for staggered trading strategy
# Each key should be a JSON array string that the transaction binary can parse
# Format: JSON array of strings, each containing a private key array
SOLANA_PRIVATE_KEYS='["[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]"]'

# Wallet names (optional - will auto-generate if not provided)
# Must match the number of private keys above
WALLET_NAMES='["Main_Wallet", "Trading_Wallet_2"]'

# Example for 3 wallets:
# SOLANA_PRIVATE_KEYS='["[wallet1_key_array]", "[wallet2_key_array]", "[wallet3_key_array]"]'
# WALLET_NAMES='["Main_Wallet", "Backup_Wallet", "Reserve_Wallet"]'

# ============================================================================
# SOLANA NETWORK CONFIGURATION
# ============================================================================

# Solana RPC URL - Use your own RPC for better performance
SOLANA_RPC_URL=https://api.mainnet-beta.solana.com

# Alternative RPC URLs:
# - https://solana-api.projectserum.com (Serum)
# - https://rpc.ankr.com/solana (Ankr)
# - https://solana-mainnet.g.alchemy.com/v2/YOUR_API_KEY (Alchemy)
# - Your own RPC endpoint for best performance

# Token mint addresses (usually don't need to change)
USDC_MINT=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
SOL_MINT=So11111111111111111111111111111111111111112

# ============================================================================
# TRADING EXECUTION CONFIGURATION
# ============================================================================

# Enable actual trading execution (false = paper trading only)
# IMPORTANT: Start with false for testing!
ENABLE_TRADING_EXECUTION=false

# Trading pair to trade
TRADING_PAIR=SOL/USDC

# Position sizing: percentage of wallet balance to use per trade (0.0 to 1.0)
# 0.9 = 90% of available USDC balance per trade
POSITION_SIZE_PERCENTAGE=0.9

# Slippage tolerance for trades (0.0 to 1.0)
# 0.005 = 0.5% slippage tolerance
SLIPPAGE_TOLERANCE=0.005

# Minimum confidence threshold for executing trades (0.0 to 1.0)
# Only execute trades when strategy confidence is above this threshold
MIN_CONFIDENCE_THRESHOLD=0.15

# Maximum concurrent positions per wallet (usually 1 for this strategy)
MAX_CONCURRENT_POSITIONS=1

# Transaction binary path (auto-detected if not set)
# TRANSACTION_BINARY_PATH=../solana-trading-bot/target/debug/transaction

# ============================================================================
# TRADING STRATEGY CONFIGURATION
# ============================================================================

# RSI (Relative Strength Index) periods
RSI_FAST_PERIOD=14
RSI_SLOW_PERIOD=21

# Simple Moving Average periods
SMA_SHORT_PERIOD=20
SMA_LONG_PERIOD=50

# Volatility calculation window
VOLATILITY_WINDOW=20

# Price change threshold for momentum detection (0.0 to 1.0)
# 0.01 = 1% price change threshold
PRICE_CHANGE_THRESHOLD=0.01

# Minimum profit target for trades (0.0 to 1.0)
MIN_PROFIT_TARGET=0.001                    # 0.1% minimum movement to enter trade
MIN_VOLATILITY_FOR_TRADING=0.0008          # 0.08% minimum volatility to enter

# Minimum hold time for positions (minutes)
MIN_HOLD_TIME_MINUTES=5

# Minimum exit profit percentage (0.0 to 1.0)
MIN_EXIT_PROFIT_PERCENT=2.0                # 2.0% minimum profit to exit
MIN_EXIT_HOLD_TIME_MINUTES=5               # 5 minutes minimum hold time

# RSI overbought/oversold thresholds
RSI_OVERBOUGHT_THRESHOLD=85.0              # RSI > 85 to exit (very high)
RSI_OVERSOLD_THRESHOLD=15.0                # RSI < 15 to exit (very low)

# ============================================================================
# MACHINE LEARNING CONFIGURATION (Enhanced)
# ============================================================================

# Enable/disable ML enhancements
ML_ENABLED=true

# Minimum confidence threshold for ML-enhanced signals (0.0 to 1.0)
# ML will only enhance signals when it's confident enough
ML_CONFIDENCE_THRESHOLD=0.3

# Maximum position size as percentage of wallet balance (0.0 to 1.0)
# ML will adjust position size within this limit based on market conditions
ML_MAX_POSITION_SIZE=0.9

# ML Trade History Settings
# Number of historical trades to load for ML learning (increased for multiwallet)
ML_TRADE_HISTORY_LIMIT=200

# ML Features Configuration
# The ML system uses these features for prediction:
# - RSI values (normalized 0-1)
# - Win rate from recent trades
# - Consecutive losses count
# - Market volatility
# - Price momentum
# - Market regime detection

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# Database service URL (HTTP API)
DATABASE_URL=http://localhost:8080

# SQLite database file path for database-service
SQLITE_DB_PATH=../data/trading_bot.db

# Database service port
PORT=8080

# Maximum database connections
MAX_CONNECTIONS=20

# ============================================================================
# PRICE FEED CONFIGURATION
# ============================================================================

# Price feed database URL (where to send price data)
PRICE_FEED_DATABASE_URL=http://localhost:8080

# Interval (in seconds) for polling Pyth Hermes API
PYTH_INTERVAL_SECS=1

# Interval (in seconds) for polling Jupiter v6 API
JUP_INTERVAL_SECS=10

# ============================================================================
# DASHBOARD CONFIGURATION
# ============================================================================

# Dashboard will automatically connect to DATABASE_URL
# Access dashboard at: http://localhost:3000
# No additional configuration needed

# ============================================================================
# ADVANCED CONFIGURATION
# ============================================================================

# Continuous mode for balance checker
CONTINUOUS_MODE=false

# Check interval for balance checker (seconds)
CHECK_INTERVAL_SECS=60

# Database service URL for balance storage
DATABASE_SERVICE_URL=http://localhost:8080

# ============================================================================
# MULTIWALLET TRADING STRATEGY NOTES
# ============================================================================

# The system now implements STAGGERED TRADING:
# 
# BUY Strategy:
# - Uses round-robin rotation across wallets
# - Each wallet gets different entry prices/times
# - Provides true diversification
#
# SELL Strategy:  
# - Sells best performing position first
# - Allows gradual profit taking
# - Maintains some market exposure
#
# Benefits:
# - Risk distribution across wallets
# - Better entry/exit timing
# - Enhanced ML learning from more trades
# - Improved capital utilization
#
# Dashboard Features:
# - Shows all wallet positions with labels
# - Displays recent trades with wallet identification
# - Real-time PnL tracking per wallet
# - ML performance metrics across all wallets

# ============================================================================
# GETTING STARTED
# ============================================================================

# 1. Generate wallet keypairs:
#    solana-keygen new --outfile wallet1.json
#    solana-keygen new --outfile wallet2.json
#
# 2. Copy private key arrays from the JSON files to SOLANA_PRIVATE_KEYS
#
# 3. Fund wallets with SOL (for fees) and USDC (for trading)
#
# 4. Start with ENABLE_TRADING_EXECUTION=false for testing
#
# 5. Run: ./start_all_screen.sh
#
# 6. Monitor dashboard at: http://localhost:3000
#
# 7. When ready, set ENABLE_TRADING_EXECUTION=true

# ============================================================================
# SECURITY NOTES
# ============================================================================

# - Never commit .env file to version control
# - Keep private keys secure and backed up
# - Start with small amounts for testing
# - Use paper trading mode initially
# - Monitor logs and dashboard carefully
# - Consider using dedicated trading wallets
